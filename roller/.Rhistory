summary.rolls(die_roll100)
# summary of the 5 roll
summary.rolls(die_roll5)
# summary of the 100 roll
summary.rolls(die_roll100)
# summary of the 5 roll
summary.rolls(die_roll5)
# summary of the 100 roll
summary.rolls(die_roll100)
source('~/Desktop/STAT133/hw-stat133/roller/tests/testthat.R', echo=TRUE)
library(testthat)
library(devtools)
devtools::test()
functions <- dir('../R')
lapply(paste0('../R', functions), source)
sink(file = 'test-output.txt')
test_dir('../tests')
sink()
source('~/Desktop/STAT133/hw-stat133/roller/tests/testthat.R', echo=TRUE)
default_device <- device()
default_device
die <- device(sides = 1:6, prob = rep(1/6, 6))
die
loaded_die <- device(sides = 1:6, prob = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.5))
loaded_die
biased_coin <- device(sides = c(1,2), prob = c(0.3,07))
default_device <- device()
default_device
die <- device(sides = 1:6, prob = rep(1/6, 6))
die
loaded_die <- device(sides = 1:6, prob = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.5))
loaded_die
biased_coin <- device(sides = c(1,2), prob = c(0.3,0.7))
biased_coin
die_75 <- device(sides = 1:75, prob = rep(1/75, 75))
die_75
flip_coin <- roll(biased_coin)
flip_coin
default_device <- device()
default_device
die <- device(sides = 1:6, prob = rep(1/6, 6))
die
loaded_die <- device(sides = 1:6, prob = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.5))
loaded_die
biased_coin <- device(sides = c(1,2), prob = c(0.3,0.7))
biased_coin
die_75 <- device(sides = 1:75, prob = rep(1/75, 75))
flip_coin <- roll(biased_coin) # flip 1 time (default is 1)
flip_coin
roll10 <- roll(die, times = 10)
roll10
loaded_roll100 <- roll(loaded_die, times = 100)
loaded_roll100
summary(loaded_roll100)
plot(loaded_roll100)
default_device <- device()
default_device
die <- device(sides = 1:6, prob = rep(1/6, 6))
die
loaded_die <- device(sides = 1:6, prob = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.5))
loaded_die
biased_coin <- device(sides = c(1,2), prob = c(0.3,0.7))
biased_coin
die_75 <- device(sides = 1:75, prob = rep(1/75, 75))
flip_coin <- roll(biased_coin) # flip 1 time (default is 1)
flip_coin
roll10 <- roll(die, times = 10)
roll10
loaded_roll100 <- roll(loaded_die, times = 100)
loaded_roll100
summary(loaded_roll100)
plot(loaded_roll100)
summary(loaded_roll10)
summary(loaded_roll10)
summary(loaded_roll10)
summary(loaded_roll10)
summary(loaded_roll10)
summary(loaded_roll10)
summary(loaded_roll10)
summary(loaded_roll10)
summary(loaded_roll10)
summary(loaded_roll10)
summary(loaded_roll10)
summary(loaded_roll10)
summary(loaded_roll10)
summary(loaded_roll10)
summary(loaded_roll10)
getwd()
# summary of the 5 roll
summary.rolls(die_roll5)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "README-"
)
library(roller)
# default device
default_device = device()
default_device
# default roll the default device
default_roll = roll(default_device)
default_roll
# create fair die device
die = device(sides = 1:6, prob = rep(1/6, 6))
die
# roll the die 5 times or 100 times
die_roll5 = roll(die, 5)
die_roll100 = roll(die, 100)
die_roll5
die_roll100
# summary of the 5 roll
summary.rolls(die_roll5)
# summary of the 5 roll
summary.rolls(die_roll5)
#' @title Rolls
#' @description creates and rolls the device for a number of times
#' @param device object of class device (a vector)
#' @param times number of tosses (default value of 1)
#' @return an object of class "rolls"
roll = function(device, times = 1L) {
if(is.device(device) == FALSE) {
stop("device is not of class 'device'")
}
check_times(times)
rolls = sample(device$sides, size = times, replace = TRUE, prob = device$prob)
rollo = list(rolls = rolls, sides = device$sides, prob = device$prob, total = times)
class(rollo) <- "rolls" #create object class rolls
rollo
}
#' @title Print Rolls
#' @description prints the 'rolls' object
#' @param x a 'roll' object
#' @return the name of the object, as well as the generated rolls
print.rolls <- function(x) {
cat('object "rolls"\n\n')
print(x$rolls)
}
#' @title Check Times
#' @description checks the validity of argument times in device function
#' @param times integer
#' @return TRUE if times is positive integer greater than or equal to 1, ERROR otherwise
check_times = function(times) {
if(is.numeric(times) == FALSE) {
stop("'times' is not integer")
} else if(times < 1) {
stop("'times' is not a positive integer")
} else {
return(TRUE)
}
}
#' @title Summary Rolls
#' @description takes a 'roll' object and makes a summary of all the data associated with it
#' @param x a 'roll' object
#' @return a dataframe with sides (of rolled 'device'),
#'        counts (frequency of the number of the roll), and prop (the relative frequencies of each side of the rolled 'device')
summary.rolls = function(x) {
count_table = data.frame(table(factor(x$rolls, levels = 1:length(x$sides))))
prop_table = data.frame(table(factor(x$rolls, levels = 1:length(x$sides))))
freqs = data.frame(
side = x$sides,
count = count_table$Freq,
prop = prop_table$Freq / x$total
)
obj = list(freqs = freqs)
class(obj) <- "summary.rolls"
obj
}
#' @title Print Summary Rolls
#' @description prints the summary.rolls object's frequency dataframe
#' @param x a 'summary.roll' object
#' @return the name of the object, as well as the dataframe of side, count, and prop associated with it
print.summary.rolls = function(x) {
cat('summary "rolls"\n\n')
print(x$freqs)
}
#' @title Plot Rolls
#' @description graphs a barchart of the proportions of the sides of devices
#' @param x a 'rolls' object
#' @return the barchart of the proportions
plot.rolls = function(x) {
x_sum = summary.rolls(x)
side = x_sum$freqs$side
freqs = x_sum$freqs$prop
barplot(freqs,
xlab = "sides of device", bty = "n",
ylab = sprintf("relative frequencies"),
names.arg = 1:length(side))
title(sprintf("Relative Frequencies in a series of %s rolls", x$total))
}
#' @title Roll Extraction Method
#' @description extracts the index of the roll
#' @param x the 'roll' object
#' @param i the index
#' @return the index of the roll
"[.rolls" <- function(x, i) {
if (i > x$total) {
stop("the given index out of bounds")
}
x$rolls[i]
}
#' @title Roll Replacement Method
#' @description replaces the value at index
#' @param x the 'roll' object
#' @param i the index
#' @param value the value to replace the index
#' @return the new value at the index
"[<-.rolls"  = function(x, i, value) {
if (i > x$total) {
stop("the given index out of bounds")
}
#x$rolls[i] = value
x$rolls = replace(x$rolls, list = i, values = value)
return(x)
}
#' @title Roll Addition Method
#' @description adds more rolls
#' @param x the 'roll' object
#' @param i the number of rolls to be added
#' @return adds i number of rolls to the roll object x
"+.rolls" <- function(x, i) {
if(i <= 0 | length(i) != 1) {s
stop("added number of rolls must be a postive integer")
}
more_rolls = roll(device(x$side, x$prob), times = i)
x$rolls = c(x$rolls, more_rolls$rolls)
return(x)
}
#' @title Rolls
#' @description creates and rolls the device for a number of times
#' @param device object of class device (a vector)
#' @param times number of tosses (default value of 1)
#' @return an object of class "rolls"
roll = function(device, times = 1L) {
if(is.device(device) == FALSE) {
stop("device is not of class 'device'")
}
check_times(times)
rolls = sample(device$sides, size = times, replace = TRUE, prob = device$prob)
rollo = list(rolls = rolls, sides = device$sides, prob = device$prob, total = times)
class(rollo) <- "rolls" #create object class rolls
rollo
}
#' @title Print Rolls
#' @description prints the 'rolls' object
#' @param x a 'roll' object
#' @return the name of the object, as well as the generated rolls
print.rolls <- function(x) {
cat('object "rolls"\n\n')
print(x$rolls)
}
#' @title Check Times
#' @description checks the validity of argument times in device function
#' @param times integer
#' @return TRUE if times is positive integer greater than or equal to 1, ERROR otherwise
check_times = function(times) {
if(is.numeric(times) == FALSE) {
stop("'times' is not integer")
} else if(times < 1) {
stop("'times' is not a positive integer")
} else {
return(TRUE)
}
}
#' @title Summary Rolls
#' @description takes a 'roll' object and makes a summary of all the data associated with it
#' @param x a 'roll' object
#' @return a dataframe with sides (of rolled 'device'),
#'        counts (frequency of the number of the roll), and prop (the relative frequencies of each side of the rolled 'device')
summary.rolls = function(x) {
count_table = data.frame(table(factor(x$rolls, levels = 1:length(x$sides))))
prop_table = data.frame(table(factor(x$rolls, levels = 1:length(x$sides))))
freqs = data.frame(
side = x$sides,
count = count_table$Freq,
prop = prop_table$Freq / x$total
)
obj = list(freqs = freqs)
class(obj) <- "summary.rolls"
obj
}
#' @title Print Summary Rolls
#' @description prints the summary.rolls object's frequency dataframe
#' @param x a 'summary.roll' object
#' @return the name of the object, as well as the dataframe of side, count, and prop associated with it
print.summary.rolls = function(x) {
cat('summary "rolls"\n\n')
print(x$freqs)
}
#' @title Plot Rolls
#' @description graphs a barchart of the proportions of the sides of devices
#' @param x a 'rolls' object
#' @return the barchart of the proportions
plot.rolls = function(x) {
x_sum = summary.rolls(x)
side = x_sum$freqs$side
freqs = x_sum$freqs$prop
barplot(freqs,
xlab = "sides of device", bty = "n",
ylab = sprintf("relative frequencies"),
names.arg = 1:length(side))
title(sprintf("Relative Frequencies in a series of %s rolls", x$total))
}
#' @title Roll Extraction Method
#' @description extracts the index of the roll
#' @param x the 'roll' object
#' @param i the index
#' @return the index of the roll
"[.rolls" <- function(x, i) {
if (i > x$total) {
stop("the given index out of bounds")
}
x$rolls[i]
}
#' @title Roll Replacement Method
#' @description replaces the value at index
#' @param x the 'roll' object
#' @param i the index
#' @param value the value to replace the index
#' @return the new value at the index
"[<-.rolls"  = function(x, i, value) {
if (i > x$total) {
stop("the given index out of bounds")
}
#x$rolls[i] = value
x$rolls = replace(x$rolls, list = i, values = value)
return(x)
}
#' @title Roll Addition Method
#' @description adds more rolls
#' @param x the 'roll' object
#' @param i the number of rolls to be added
#' @return adds i number of rolls to the roll object x
"+.rolls" <- function(x, i) {
if(i <= 0 | length(i) != 1) {s
stop("added number of rolls must be a postive integer")
}
more_rolls = roll(device(x$side, x$prob), times = i)
x$rolls = c(x$rolls, more_rolls$rolls)
return(x)
}
#' @title Device
#' @description creates a coin with sides and probability, coin is fair by default
#' @param sides vector of k ≥ 2 elements, by default numbers 1 and 2
#' @param prob vector of probabilities for each side (all equal to 1/2 by default).
#' @return device object
device = function(sides = c(1,2), prob = c(0.5, 0.5)) {
check_sides(sides)
check_prob(prob)
if(length(sides) != length(prob)) {
stop("'sides' and 'prob' have different lengths")
}
dev <- list(sides = sides, prob = prob)
class(dev) <- "device" #create object classs device, with attributes sides and prob
return(dev)
}
#' @title Print Device
#' @description prints the device object
#' @param x a device object
#' @return prints the data frame of the device object with its sides and probabilities
print.device <- function(x) {
cat('object "device"\n\n')
side_prob <- data.frame(side = x$sides, prob = x$prob)
print(side_prob)
}
#' @title Is Device
#' @description checks if the object is of class device
#' @param x an object
#' @return TRUE if object x is of class 'device', FALSE otherwise
is.device = function(x) {
if(class(x) == 'device') {
return(TRUE)
} else {
return(FALSE)
}
}
#' @title Check Sides
#' @description checks the validity of argument sides in device function
#' @param sides vector of k ≥ 2 elements
#' @return TRUE if sides is a vector with more than 1 element, not containing duplicates. Throws error otherwise.
check_sides = function(sides) {
if(length(sides) < 2) {
stop("'sides' must be a vector of length greater than 1")
} else if(any(duplicated(sides))) {
stop("'sides' cannot have duplicated elements")
}
}
#' @title Check Prob
#' @description checks the validity of argument prob in device function
#' @param prob vector of probabilities for each side
#' @return TRUE if vector is a numeric vector with more than 1 element, 0<x<1, and elements add to 1. Throws error otherwise.
check_prob = function(prob) {
if(is.numeric(prob) == FALSE) {
stop("'prob' is not a numeric vector")
} else if(length(prob) < 2) {
stop("'prob' must be a vector of length greater than 1")
} else if(sum(prob) != 1) {
stop("elements in 'prob' must add up to 1")
} else if(any(prob < 0) | any(prob > 1)) {
stop("elements in 'prob' exceed 1 or are less than 0")
} else {
return(TRUE)
}
}
# summary of the 5 roll
summary.rolls(die_roll5)
# summary of the 100 roll
summary.rolls(die_roll100)
source('~/Desktop/STAT133/hw-stat133/roller/tests/testthat.R', echo=TRUE)
source('~/Desktop/STAT133/hw-stat133/roller/tests/testthat.R', echo=TRUE)
source('~/Desktop/STAT133/hw-stat133/roller/tests/testthat.R', echo=TRUE)
source('~/Desktop/STAT133/hw-stat133/roller/tests/testthat.R', echo=TRUE)
load(roller)
library(roller)
device(sides = 2, prob = c(1/2, 1/2))
device(sides = 1:2, prob = c(1/2, 1/2))
die1 = device(sides = 1:2, prob = c(1/2, 1/2))
roll(die1, times = 10)
roll1 = roll(die1, times = 10)
summary.rolls(roll1)
plot(roll1)
albus = c("d", "u", "m", "b", "l", "e", "d", "o", "r", "e")
albus[1:5]
albus[albus != "e"]
albus != "e"
albus[TRUE]
albus[-length(albus)]
-length(albus)
albus[-10]
albus[-1]
albus[1]
albus[-5]
albus[-10]
albus[-9]
albus[-length(albus)]
albus[-9]
albus[-8]
albus[3:1]
albus[1:3]
albus[3:1] == albus[1:3]
albus[TRUE, FALSE]
albus[c(TRUE, FALSE)]
albus[c(FALSE, TRUE)]
sum(albus == c('a', 'e', 'i', 'o', u))
sum(albus == c('a', 'e', 'i', 'o', 'u'))
albus == c('a', 'e', 'i', 'o', 'u')
albus == 'o'
sum(albus == 'o')
pwoe-lol = 5
man(ggplot)
a = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
b = c('TRUE', 'FALSE')
a[b]
a[c('TRUE', 'FALSE')]
a
a[TRUE]
a[TRUE, FALSE]
a[c(TRUE, FALSE)]
x = 1
x > 5
a{1:5}
a[1:5]
a[2:6]
1:3^2
sqrt4 = 1
matrix(1:12, nrow = 4, ncol = 3)
?:
?":"
head(a, n=5)
matrix(1:12, nrow = 4, ncol = 4)
1 & 2
3var = 3
.var - ``
.var = 1
.var
_var = 1
Varname = 1
Varname
varname
var-name = 1
butter = c(c(TRUE, FALSE), 2, "butter")
typeof(butter)
typeof(as.factor(butter))
as.factor(butter)
2[TRUE, FALSE]
yummy = c(TRUE)
yummy[2] = FALSE
peanut = yummy + 1L
length(peanut)
peanut
butter = c(yummy, peanut, "butter")
butter
jelly = as.factor(butter)
sandwich = butter[peanut[yummy]]
sandwich
roller::device()
(hello)
a = c(1, 2, 3, 4, 5)
a[!1]
a[-which(a > 2)]
a[!which(a > 2)]
matrix(1:12, nrow = 4)
matrix(1:12, ncol = 3)
df = df(first = c('Harry', 'Hermoine'), last = c('Potter', 'Granger'), gender = c('male', 'female'), born = c(1980, 1979))
df = df(first = c('Harry', 'Hermoine'), last = c('Potter', 'Granger'), gender = c('male', 'female'), born = c(1980, 1979))
df = data.frame(first = c('Harry', 'Hermoine'), last = c('Potter', 'Granger'), gender = c('male', 'female'), born = c(1980, 1979))
df
df[df$born == 1980]
df[df$born == 1980,]
df$born == 1980
df[,df$born == 1980]
df$first[df$born == 1980]
df
