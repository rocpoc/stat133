###########
context("Test for STAT_CENTERS")
test_that("gets correct info", {
expect_equal(stat_centers(x), c(3,3))
})
context("Test for STAT_SPREAD")
test_that("gets correct info", {
expect_equal(stat_centers(x), c(3,3,3))
})
IQR(x)
stat_range(x)
sd(x)
# load the source code of the functions to be tested
source("functions.R")
x <- c(1, 2, 3, 4, 5)
y <- c(1, 2, 3, 4, NA)
z <- c(TRUE, FALSE, TRUE)
w <- letters[1:5]
# context with one test that groups expectations
context("Test for range value")
test_that("range works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_range(x), 4)
expect_length(stat_range(x), 1)
expect_type(stat_range(x), 'double')
})
context("Test for range value with Y")
test_that("range works as expected with y", {
expect_length(stat_range(y), 1)
expect_type(stat_range(y), 'NA_real_')
})
context("Test for range value with Z")
test_that("range works as expected with z", {
expect_length(stat_range(z), 1)
expect_type(stat_range(z), 'integer')
expect_equal(stat_range(z), 1L)
})
context("Test for range value with W")
test_that("range works as expected with w", {
expect_error(stat_range(w), "non-numeric argument to binary operator")
})
###########
context("Test for STAT_CENTERS")
test_that("gets correct info", {
expect_equal(stat_centers(x), c(3,3))
})
context("Test for STAT_SPREAD")
test_that("gets correct info", {
expect_equal(stat_centers(x), c(4,2,1.58))
})
stat_centers(x)
# load the source code of the functions to be tested
source("functions.R")
x <- c(1, 2, 3, 4, 5)
y <- c(1, 2, 3, 4, NA)
z <- c(TRUE, FALSE, TRUE)
w <- letters[1:5]
# context with one test that groups expectations
context("Test for range value")
test_that("range works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_range(x), 4)
expect_length(stat_range(x), 1)
expect_type(stat_range(x), 'double')
})
context("Test for range value with Y")
test_that("range works as expected with y", {
expect_length(stat_range(y), 1)
expect_type(stat_range(y), 'NA_real_')
})
context("Test for range value with Z")
test_that("range works as expected with z", {
expect_length(stat_range(z), 1)
expect_type(stat_range(z), 'integer')
expect_equal(stat_range(z), 1L)
})
context("Test for range value with W")
test_that("range works as expected with w", {
expect_error(stat_range(w), "non-numeric argument to binary operator")
})
###########
context("Test for STAT_CENTERS")
test_that("gets correct info", {
expect_equal(stat_centers(x), c(3,3))
})
context("Test for STAT_SPREAD")
test_that("gets correct info", {
expect_equal(stat_spreads(x), c(4,2,1.58))
})
sd(x)
# load the source code of the functions to be tested
source("functions.R")
x <- c(1, 2, 3, 4, 5)
y <- c(1, 2, 3, 4, NA)
z <- c(TRUE, FALSE, TRUE)
w <- letters[1:5]
# context with one test that groups expectations
context("Test for range value")
test_that("range works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_range(x), 4)
expect_length(stat_range(x), 1)
expect_type(stat_range(x), 'double')
})
context("Test for range value with Y")
test_that("range works as expected with y", {
expect_length(stat_range(y), 1)
expect_type(stat_range(y), 'NA_real_')
})
context("Test for range value with Z")
test_that("range works as expected with z", {
expect_length(stat_range(z), 1)
expect_type(stat_range(z), 'integer')
expect_equal(stat_range(z), 1L)
})
context("Test for range value with W")
test_that("range works as expected with w", {
expect_error(stat_range(w), "non-numeric argument to binary operator")
})
###########
context("Test for STAT_CENTERS")
test_that("gets correct info", {sd
expect_equal(stat_centers(x), c(3,3))
})
context("Test for STAT_SPREAD")
test_that("gets correct info", {
expect_equal(stat_spreads(x), c(4,2,1.581139))
})
# load the source code of the functions to be tested
source("functions.R")
x <- c(1, 2, 3, 4, 5)
y <- c(1, 2, 3, 4, NA)
z <- c(TRUE, FALSE, TRUE)
w <- letters[1:5]
# context with one test that groups expectations
context("Test for range value")
test_that("range works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_range(x), 4)
expect_length(stat_range(x), 1)
expect_type(stat_range(x), 'double')
})
context("Test for range value with Y")
test_that("range works as expected with y", {
expect_length(stat_range(y), 1)
expect_type(stat_range(y), 'NA_real_')
})
context("Test for range value with Z")
test_that("range works as expected with z", {
expect_length(stat_range(z), 1)
expect_type(stat_range(z), 'integer')
expect_equal(stat_range(z), 1L)
})
context("Test for range value with W")
test_that("range works as expected with w", {
expect_error(stat_range(w), "non-numeric argument to binary operator")
})
###########
context("Test for STAT_CENTERS")
test_that("gets correct info", {sd
expect_equal(stat_centers(x), c(3,3))
})
context("Test for STAT_SPREAD")
test_that("gets correct info", {
expect_equivalent(stat_spreads(x), c(4,2,1.581139))
})
# load the source code of the functions to be tested
source("functions.R")
x <- c(1, 2, 3, 4, 5)
y <- c(1, 2, 3, 4, NA)
z <- c(TRUE, FALSE, TRUE)
w <- letters[1:5]
# context with one test that groups expectations
context("Test for range value")
test_that("range works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_range(x), 4)
expect_length(stat_range(x), 1)
expect_type(stat_range(x), 'double')
})
context("Test for range value with Y")
test_that("range works as expected with y", {
expect_length(stat_range(y), 1)
expect_type(stat_range(y), 'NA_real_')
})
context("Test for range value with Z")
test_that("range works as expected with z", {
expect_length(stat_range(z), 1)
expect_type(stat_range(z), 'integer')
expect_equal(stat_range(z), 1L)
})
context("Test for range value with W")
test_that("range works as expected with w", {
expect_error(stat_range(w), "non-numeric argument to binary operator")
})
###########
context("Test for STAT_CENTERS")
test_that("gets correct info", {sd
expect_equal(stat_centers(x), c(3,3))
})
context("Test for STAT_SPREAD")
test_that("gets correct info", {
expect_equal(stat_spreads(x), c(4,2,1.581139))
})
round(stat_spreads(x))
round(stat_spreads(x),2)
context("Test for STAT_SPREAD")
test_that("gets correct info", {
expect_equal(round(stat_spreads(x),2), c(4.00, 2.00, 1.58))
})
head(USArrests)
states <- rownames(USArrests)
head(states)
states <- rownames(USArrests)
head(states)
nchar(states)
states <- rownames(USArrests)
head(states)
nchar(states)
tolower(states)
toupper(states)
casefold(states)
states <- rownames(USArrests)
head(states)
nchar(states)
tolower(states)
toupper(states)
casefold(states)
char_freqs = table(num_chars)
states <- rownames(USArrests)
head(states)
nchar(states)
tolower(states)
toupper(states)
casefold(states)
# number of charcaters
num_chars <- nchar(states)
char_freqs = table(num_chars)
states <- rownames(USArrests)
head(states)
nchar(states)
tolower(states)
toupper(states)
casefold(states)
# number of charcaters
num_chars <- nchar(states)
char_freqs = table(num_chars)
char_freqs
states <- rownames(USArrests)
head(states)
nchar(states)
tolower(states)
toupper(states)
casefold(states)
# number of charcaters
num_chars <- nchar(states)
char_freqs = table(num_chars)
char_freqs
plot(char_freqs)
states <- rownames(USArrests)
head(states)
nchar(states)
tolower(states)
toupper(states)
casefold(states)
# number of charcaters
num_chars <- nchar(states)
char_freqs = table(num_chars)
hist(char_freqs)
states <- rownames(USArrests)
head(states)
nchar(states)
tolower(states)
toupper(states)
casefold(states)
# number of charcaters
num_chars <- nchar(states)
char_freqs = table(num_chars)
hist(char_freqs, 1)
states <- rownames(USArrests)
head(states)
nchar(states)
tolower(states)
toupper(states)
casefold(states)
# number of charcaters
num_chars <- nchar(states)
char_freqs = table(num_chars)
hist(char_freqs, 4)
states <- rownames(USArrests)
head(states)
nchar(states)
tolower(states)
toupper(states)
casefold(states)
# number of charcaters
num_chars <- nchar(states)
char_freqs = table(num_chars)
hist(char_freqs, breaks = 50)
states <- rownames(USArrests)
head(states)
nchar(states)
tolower(states)
toupper(states)
casefold(states)
# number of charcaters
num_chars <- nchar(states)
char_freqs = table(num_chars)
hist(char_freqs, breaks = 14)
char_freqs
head(states)
head(states, 5)
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
paste(head(states, 5), collapse = '')
permutations(x)
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
paste(head(states, 5), collapse = '')
#Permutations ?????????????????????????????????
substr(states, 1, 3)
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
paste(head(states, 5), collapse = '')
#Permutations ?????????????????????????????????
substr(states, 1, 3)
substr(states, -3, -1)
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
paste(head(states, 5), collapse = '')
#Permutations ?????????????????????????????????
substr(states, 1, 3)
substr(states, -3, 1)
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
paste(head(states, 5), collapse = '')
#Permutations ?????????????????????????????????
substr(states, 1, 3)
substr(states, 1)
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
paste(head(states, 5), collapse = '')
#Permutations ?????????????????????????????????
substr(states, 1, 3)
substr(states, -1)
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
paste(head(states, 5), collapse = '')
#Permutations ?????????????????????????????????
substr(states, 1, 3)
substr(states, -1, -2)
states[-1]
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
paste(head(states, 5), collapse = '')
#Permutations ?????????????????????????????????
substr(states, 1, 3)
substr(states, -3, -1)
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
paste(head(states, 5), collapse = '')
#Permutations ?????????????????????????????????
substr(states, 1, 3)
substr(states, -1, -1)
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
paste(head(states, 5), collapse = '')
#Permutations ?????????????????????????????????
substr(states, 1, 3)
substr(states, x[length(x)], x[length(x)-2, x[length(x)]-3)
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
paste(head(states, 5), collapse = '')
#Permutations ?????????????????????????????????
substr(states, 1, 3)
substr(states, (x[length(x)]), (x[length(x)-2), (x[length(x)]-3) )
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
paste(head(states, 5), collapse = '')
#Permutations ?????????????????????????????????
substr(states, 1, 3)
substr(states, (x[length(x)]), (x[length(x)-2), (x[length(x)]-3))
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
paste(head(states, 5), collapse = '')
#Permutations ?????????????????????????????????
substr(states, 1, 3)
substr(states, nchar(states)-2, nchar(states))
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
paste(head(states, 5), collapse = '')
#Permutations ?????????????????????????????????
substr(states, 1, 3)
substr(states, nchar(states)-2, nchar(states))
substr(states, states[1], nchar(states)-2, nchar(states))
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
paste(head(states, 5), collapse = '')
#Permutations ?????????????????????????????????
substr(states, 1, 3)
substr(states, nchar(states)-2, nchar(states))
substr(states, states[1], paste(nchar(states)-2, nchar(states)))
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
paste(head(states, 5), collapse = '')
#Permutations ?????????????????????????????????
substr(states, 1, 3)
substr(states, nchar(states)-2, nchar(states))
substr(states, states[1], 2)
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
paste(head(states, 5), collapse = '')
#Permutations ?????????????????????????????????
substr(states, 1, 3)
substr(states, nchar(states)-2, nchar(states))
substr(states, 1, paste(nchar(states)-2, nchar(states)))
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
paste(head(states, 5), collapse = '')
#Permutations ?????????????????????????????????
substr(states, 1, 3)
substr(states, nchar(states)-2, nchar(states))
substr(states, 1, 10)
paste(nchar(states)-2, nchar(states))
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
paste(head(states, 5), collapse = '')
#Permutations ?????????????????????????????????
substr(states, 1, 3)
substr(states, nchar(states)-2, nchar(states))
substr(states, 1, paste0(nchar(states)-2, nchar(states)))
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
paste(head(states, 5), collapse = '')
#Permutations ?????????????????????????????????
substr(states, 1, 3)
substr(states, nchar(states)-2, nchar(states))
paste0(substr(states, 1, 1), substr(states, nchar(states)-2, nchar(states)))
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
paste(head(states, 5), collapse = '')
#Permutations ??????????????????????????????????????????????????????????????????
substr(states, 1, 3)
substr(states, nchar(states)-2, nchar(states))
paste0(substr(states, 1, 1), substr(states, nchar(states)-2, nchar(states)))
vec = c(7, 6, 7, 8, 10)
paste(head(states, 5), vec, sep = " = ")
paste(head(states, 5), collapse = '')
#Permutations ??????????????????????????????????????????????????????????????????
substr(states, 1, 3)
substr(states, nchar(states)-2, nchar(states))
paste0(substr(states, 1, 1), substr(states, nchar(states)-2, nchar(states)))
# 4-char states
states[num_chars == 4]
states_list = rep("", length(states))
i = 0
for(s in state) {
if(numchars(s) %% 2 == 0) {
states_list[i] = toupper(s)
}
if(numchars(s) %% 2 == 1) {
states_list[i] = tolower(s)
}
i = i+1
}
states_list = rep("", length(states))
i = 0
for(s in states) {
if(numchars(s) %% 2 == 0) {
states_list[i] = toupper(s)
}
if(numchars(s) %% 2 == 1) {
states_list[i] = tolower(s)
}
i = i+1
}
states_list = rep("", length(states))
i = 0
for(s in states) {
if(numchars(s) %% 2 == 0) {
states_list[i] = toupper(s)
}
if(numchars(s) %% 2 == 1) {
states_list[i] = tolower(s)
}
i = i+1
}
states_list = rep("", length(states))
i = 0
for(s in states) {
if(num_chars(s) %% 2 == 0) {
states_list[i] = toupper(s)
}
if(num_chars(s) %% 2 == 1) {
states_list[i] = tolower(s)
}
i = i+1
}
states_list = rep("", length(states))
i = 0
for(s in states) {
if(nchar(s) %% 2 == 0) {
states_list[i] = toupper(s)
}
if(nchar(s) %% 2 == 1) {
states_list[i] = tolower(s)
}
i = i+1
}
states_list
